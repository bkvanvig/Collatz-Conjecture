        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20:#define CACHE 1
        -:   21:
        -:   22:#ifdef CACHE
        -:   23:int init_cache = 0;
        -:   24:unsigned int cache [1000001] = {(unsigned)0};
        -:   25:#endif
        -:   26:
        -:   27:// ------------
        -:   28:// collatz_read
        -:   29:// ------------
        -:   30:
function _Z12collatz_readRKSs called 20 returned 100% blocks executed 80%
       20:   31:pair<int, int> collatz_read (const string& s) {
       20:   32:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   33:    int i;
        -:   34:    int j;
       20:   35:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       20:   36:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   37:
        -:   38:// ------------
        -:   39:// collatz_eval
        -:   40:// ------------
        -:   41:
function _Z12collatz_evalii called 28 returned 100% blocks executed 88%
       28:   42:int collatz_eval (int i, int j) {
        -:   43:    // <your code>
       28:   44:    int max_cycle_length = 0;
       28:   45:    int curr_cycle_length = 0;
        -:   46:
       28:   47:    if (i>j){
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        8:   48:	   int temp = i;
        8:   49:	   i = j;
        8:   50:	   j = temp;
        -:   51:    }
        -:   52:
       28:   53:    assert (i<=j);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       28:   54:    assert(i>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   55:
       28:   56:    if (CACHE && init_cache == 0){
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        1:   57:        populate_cache(1, 100000);
call    0 returned 100%
        1:   58:        init_cache = 1;
        -:   59:    }
        -:   60:
   200930:   61:    for (int bound = i; bound<=j; bound++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   62:
        -:   63:        if (CACHE){
   200902:   64:           if (cache[bound]!=0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   200893:   65:                curr_cycle_length=cache[bound];
        -:   66:           else {
        9:   67:                curr_cycle_length= collatz_calc(bound);
call    0 returned 100%
        9:   68:                cache[bound] = curr_cycle_length;
        -:   69:             } 
        -:   70:        }
        -:   71:        else
        -:   72:            curr_cycle_length = collatz_calc(bound);
   200902:   73:	max_cycle_length = curr_cycle_length > max_cycle_length ? curr_cycle_length : max_cycle_length;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   74:    }
       28:   75:    assert(max_cycle_length>0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       28:   76:    return max_cycle_length;}
        -:   77:
        -:   78:
        -:   79:// -------------
        -:   80:// collatz_calc
        -:   81:// -------------
        -:   82:
function _Z12collatz_calci called 100019 returned 100% blocks executed 100%
   100019:   83:int collatz_calc (int i){
   100019:   84:    int cycle_length = 0;
        -:   85:
  7391028:   86:    while (i != 1){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  7190990:   87:        if ((i%2)==1){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
  3565988:   88:            i = i + (i>>1) + 1;
  3565988:   89:            cycle_length+=2;
        -:   90:        }
        -:   91:        else{
  3625002:   92:            i = i>>1;
  3625002:   93:            cycle_length++;
        -:   94:        }
        -:   95:    }
   100019:   96:    return cycle_length+1;
        -:   97:}
        -:   98:
        -:   99:// -------------
        -:  100:// collatz_calc
        -:  101:// -------------
        -:  102:
function _Z14populate_cacheii called 1 returned 100% blocks executed 67%
        1:  103:void populate_cache (int i, int j){
        1:  104:    assert(i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  105:    assert(i <= 1000000);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  106:    assert(j > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  107:    assert(j <= 1000000);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  108:    if (i>j){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  109:       int temp = i;
    #####:  110:       i = j;
    #####:  111:       j = temp;
        -:  112:    }
        -:  113:    
        1:  114:    assert (i<=j);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  115:
   100002:  116:    while(i<=j){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   100000:  117:        cache[i]=collatz_calc(i);
call    0 returned 100%
   100000:  118:        ++i;
        -:  119:    }
        1:  120:    return;
        -:  121:}
        -:  122:
        -:  123:// -------------
        -:  124:// collatz_print
        -:  125:// -------------
        -:  126:
function _Z13collatz_printRSoiii called 20 returned 100% blocks executed 100%
       20:  127:void collatz_print (ostream& w, int i, int j, int v) {
       20:  128:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:  129:
        -:  130:// -------------
        -:  131:// collatz_solve
        -:  132:// -------------
        -:  133:
function _Z13collatz_solveRSiRSo called 4 returned 100% blocks executed 80%
        4:  134:void collatz_solve (istream& r, ostream& w) {
        4:  135:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       24:  136:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 80%
branch  7 taken 20% (fallthrough)
       16:  137:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16:  138:        const int            i = p.first;
       16:  139:        const int            j = p.second;
       16:  140:        const int            v = collatz_eval(i, j);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _GLOBAL__sub_I_init_cache called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       23:  141:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
